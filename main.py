import os
import sys
import time
import signal
import logging
import asyncio
import discord
from dotenv import load_dotenv
from discord.ext import commands
from pypresence import Presence
from modules.logger import setup_logger
from modules.drunk import DrunkManager
from modules.inventory import InventoryManager
from modules.events import setup_events
from modules.commands import setup_commands

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
logger = setup_logger()
load_dotenv()
BOT_ID = os.getenv("BOT_ID")

class PresenceManager:
    def __init__(self, bot):
        self.bot = bot
        self.rpc = None
        self.client_id = BOT_ID
        self.start_time = int(time.time())

    async def setup_presence(self):
        try:
            await self.bot.loop.run_in_executor(None, self._connect_rpc)
            await self._update_presence()
            logger.info("‚≠ê Discord RPC —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"RPC Error: {str(e)}")
            return False

    def _connect_rpc(self):
        self.rpc = Presence(self.client_id)
        self.rpc.connect()

    async def _update_presence(self, drinks: int = 4):
        activity = {
            "state": f"üç∂ –í—ã–ø–∏—Ç–æ —Å–∞–∫–µ: {drinks}",
            "details": "üå∏ –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞ –ö—ë–º—É",
            "large_image": "1",
            "large_text": "–ö—ë–º—É",
            "start": self.start_time
        }
        await self.bot.loop.run_in_executor(
            None, lambda: self.rpc.update(**activity)
        )

class KemuBot(commands.Bot):
    def __init__(self):
        self.logger = logger
        intents = discord.Intents.all()
        super().__init__(
            command_prefix='/',
            intents=intents,
            activity=discord.Activity(
                type=discord.ActivityType.watching,
                name="üç° –†–∏—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
            ),
            status=discord.Status.idle
        )
        self.drunk_manager = DrunkManager(self)
        self.inventory_manager = InventoryManager()
        self.presence_manager = PresenceManager(self)
        self.ready_flag = False
        self.ready_lock = asyncio.Lock()

    async def setup_hook(self):
        try:
            logger.info("üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
            if not os.path.exists("data"):
                os.makedirs("data")
                logger.warning("üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ data")

            await self.load_extension("modules.admin")
            
            await asyncio.wait_for(setup_commands(self), timeout=10)
            await asyncio.wait_for(setup_events(self), timeout=10)
            await asyncio.wait_for(self.drunk_manager.restore_nicknames(), timeout=30)
            
            synced = await self.tree.sync()
            logger.info(f"üå∏ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {len(synced)}")
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.inventory_manager.items)}")
            logger.info(f"üéí –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π: {len(self.inventory_manager.inventories)}")

        except asyncio.TimeoutError:
            logger.critical("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")
        except Exception as e:
            logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π: {e}")
            raise

    async def on_ready(self):
        async with self.ready_lock:
            if self.ready_flag:
                return
            self.ready_flag = True
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω –∫–∞–∫ {self.user}")
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä–æ–≤: {len(self.guilds)}")
            try:
                await self.presence_manager.setup_presence()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ RPC: {e}")

    async def close(self):
        logger.info("‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        try:
            self.inventory_manager.save_inventories()
            logger.info("üíæ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ RPC
        if self.presence_manager.rpc:
            try:
                self.presence_manager.rpc.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è RPC: {e}")
        
        await super().close()

def handle_exit(signum, frame):
    asyncio.create_task(bot.close())

if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    discord.utils.setup_logging(handler=logging.NullHandler())
    bot = KemuBot()
    signal.signal(signal.SIGINT, handle_exit)
    signal.signal(signal.SIGTERM, handle_exit)
    try:
        bot.run(os.getenv('DISCORD_TOKEN'), log_handler=None)
    except discord.LoginFailure:
        logger.critical("üîë –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Discord!")
    except KeyboardInterrupt:
        logger.info("üö´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    except Exception as e:
        logger.critical(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")