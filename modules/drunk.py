import json
import random
import asyncio
from pathlib import Path
from datetime import datetime
from typing import Dict, Any
import discord
from discord.ext import commands
from modules.logger import logger

class DrunkManager:
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True)
        self.users_file = self.data_dir / "drunk_users.json"
        self.dict_file = self.data_dir / "drunk_dict.json"
        self.users: Dict[int, Dict] = {}
        self.char_map = {}
        self._ensure_files_exist()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_data()

    def _ensure_files_exist(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
        if not self.users_file.exists():
            with open(self.users_file, "w", encoding="utf-8") as f:
                json.dump({}, f)
        if not self.dict_file.exists():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º drunk_dict
            default_map = {
                "char_map": {
                    "–∞": ["–∞", "a", "@"],
                    "–±": ["–±", "6"],
                    "–≤": ["–≤", "v"],
                    "–≥": ["–≥", "r"],
                    "–¥": ["–¥", "d"],
                    "–µ": ["–µ", "e"],
                    "—ë": ["—ë", "e"],
                    "–∂": ["–∂", "zh"],
                    "–∑": ["–∑", "3"],
                    "–∏": ["–∏", "u"],
                    "–π": ["–π", "y"],
                    "–∫": ["–∫", "k"],
                    "–ª": ["–ª", "l"],
                    "–º": ["–º", "m"],
                    "–Ω": ["–Ω", "h"],
                    "–æ": ["–æ", "o", "0"],
                    "–ø": ["–ø", "n"],
                    "—Ä": ["—Ä", "p"],
                    "—Å": ["—Å", "c", "s"],
                    "—Ç": ["—Ç", "t"],
                    "—É": ["—É", "y"],
                    "—Ñ": ["—Ñ", "f"],
                    "—Ö": ["—Ö", "x"],
                    "—Ü": ["—Ü", "ts"],
                    "—á": ["—á", "ch"],
                    "—à": ["—à", "sh"],
                    "—â": ["—â", "shch"],
                    "—ä": ["—ä", ""],
                    "—ã": ["—ã", "i"],
                    "—å": ["—å", ""],
                    "—ç": ["—ç", "e"],
                    "—é": ["—é", "yu"],
                    "—è": ["—è", "ya"]
                }
            }
            with open(self.dict_file, "w", encoding="utf-8") as f:
                json.dump(default_map, f, ensure_ascii=False, indent=2)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤."""
        try:
            with open(self.users_file, "r", encoding="utf-8") as f:
                self.users = json.load(f) or {}
            with open(self.dict_file, "r", encoding="utf-8") as f:
                data = json.load(f) or {}
                self.char_map = data.get("char_map", {})
            logger.info("üåÄ –î–∞–Ω–Ω—ã–µ –æ–ø—å—è–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON."""
        try:
            with open(self.users_file, "w", encoding="utf-8") as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def drunkify_text(self, text: str) -> str:
        """–ò—Å–∫–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤."""
        drunk_text = []
        for char in text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª –≤ —Å–ª–æ–≤–∞—Ä–µ –∑–∞–º–µ–Ω
            lower_char = char.lower()
            if lower_char in self.char_map:
                replacements = self.char_map[lower_char]
                new_char = random.choice(replacements)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                drunk_text.append(new_char.upper() if char.isupper() else new_char)
            else:
                drunk_text.append(char)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—å—è–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if random.random() < 0.3:
            drunk_text.insert(random.randint(0, len(drunk_text)), random.choice([" *hic*", "‚Ä¶", " *burp*"]))
        
        return ''.join(drunk_text)

    async def process_drink(self, user: discord.Member, guild: discord.Guild, is_admin: bool) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–≤—ã–ø–∏—Ç—å."""
        if user.id in self.users:
            return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—å—è–Ω

        original_nick = user.display_name
        drunk_nick = self.drunkify_text(original_nick)[:32]  # –û–±—Ä–µ–∑–∫–∞ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤

        try:
            await user.edit(nick=drunk_nick)
        except discord.Forbidden:
            if not is_admin:
                raise
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user}")

        self.users[user.id] = {
            "original_nick": original_nick,
            "sober_time": datetime.now().timestamp() + 600,  # 10 –º–∏–Ω—É—Ç
            "guild_id": guild.id
        }
        self.save_data()

        asyncio.create_task(self.schedule_sober_up(user.id, 600))
        return True

    async def schedule_sober_up(self, user_id: int, delay: float):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        await asyncio.sleep(delay)
        await self.sober_up(user_id)

    async def sober_up(self, user_id: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.users:
            return

        data = self.users[user_id]
        guild = self.bot.get_guild(data["guild_id"])

        if not guild:
            del self.users[user_id]
            return

        try:
            member = await guild.fetch_member(user_id)
            await member.edit(nick=data["original_nick"])
            logger.info(f"‚úÖ –ù–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {member.display_name}")
        except discord.NotFound:
            logger.warning(f"üåÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        finally:
            if user_id in self.users:
                del self.users[user_id]
                self.save_data()

    async def restore_nicknames(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∏–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        now = datetime.now().timestamp()
        for user_id, data in list(self.users.items()):
            try:
                if data["sober_time"] <= now:
                    await self.sober_up(user_id)
                else:
                    delay = data["sober_time"] - now
                    asyncio.create_task(self.schedule_sober_up(user_id, delay))
            except Exception as e:
                logger.error(f"üåÄ –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        self.save_data()