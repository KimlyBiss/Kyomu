import json
import random
from pathlib import Path
from discord import app_commands
import logging

logger = logging.getLogger(__name__)

class InventoryManager:
    def __init__(self):
        self.data_path = Path(__file__).parent.parent / "data"
        self.items = self._load_items()
        self.inventories = self._load_inventories()
        logger.info(f"üåÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        logger.info(f"üéí –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.inventories)} –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π")

    def _load_items(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ items_library.json"""
        try:
            items_path = self.data_path / "items_library.json"
            
            # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not items_path.exists():
                logger.warning("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª items_library.json")
                with open(items_path, "w", encoding="utf-8") as f:
                    json.dump({"items": {}}, f)
                return {}

            with open(items_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data.get("items", {})

        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ items_library.json!")
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}")
            return {}

    def _load_inventories(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ inventories.json"""
        try:
            inv_path = self.data_path / "inventories.json"
            
            # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not inv_path.exists():
                logger.warning("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª inventories.json")
                with open(inv_path, "w", encoding="utf-8") as f:
                    json.dump({}, f)
                return {}

            with open(inv_path, "r", encoding="utf-8") as f:
                return json.load(f)

        except json.JSONDecodeError:
            logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ inventories.json!")
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π: {str(e)}")
            return {}

    def save_inventories(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_path / "inventories.json", "w", encoding="utf-8") as f:
                json.dump(self.inventories, f, indent=4, ensure_ascii=False)
            logger.debug("üíæ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def get_user_inventory(self, user_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        user_inv = self.inventories.get(user_id, {})
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        valid_items = {
            item_id: count 
            for item_id, count in user_inv.items() 
            if item_id in self.items
        }
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if len(valid_items) != len(user_inv):
            self.inventories[user_id] = valid_items
            self.save_inventories()
            
        return valid_items

    def get_item_info(self, item_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ ID"""
        return self.items.get(item_id, {
            "name": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
            "description": "–≠—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ—Ç–µ—Ä—è–Ω –≤ —Ç—É–º–∞–Ω–µ –≤—Ä–µ–º–µ–Ω–∏...",
            "rarity": "unknown"
        })

    def give_random_item(self, user_id: str) -> dict:
        """–í—ã–¥–∞—á–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–≥—Ä–æ–∫—É"""
        try:
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
            rarities = {
                "common": 0.5,
                "uncommon": 0.3,
                "rare": 0.15,
                "legendary": 0.05
            }
            
            # –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏
            chosen_rarity = random.choices(
                list(rarities.keys()),
                weights=list(rarities.values()),
                k=1
            )[0]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            available = [
                item_id 
                for item_id, data in self.items.items() 
                if data.get("rarity") == chosen_rarity
            ]
            
            if not available:
                logger.warning(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–µ–¥–∫–æ—Å—Ç–∏ {chosen_rarity}!")
                return None
                
            # –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            item_id = random.choice(available)
            self.inventories.setdefault(user_id, {})[item_id] = \
                self.inventories[user_id].get(item_id, 0) + 1
            self.save_inventories()
            
            logger.info(f"üéÅ {user_id} –ø–æ–ª—É—á–∏–ª {item_id}")
            return self.items[item_id]
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {str(e)}")
            return None

    def get_items_for_choices(self) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)"""
        return [
            app_commands.Choice(
                name=f"{item['name']} ({item['rarity']})", 
                value=item_id
            )
            for item_id, item in self.items.items()
        ][:25]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord –Ω–∞ 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤